#--------------------------------------------------
#
# biosys bootcamp 2013 -- homework
#
# james yurkovich
#
# worked with vu ngo, chris wei
#
#--------------------------------------------------

print '--- Initialization ---'

import pandas
import numpy as np
import itertools
from sys import argv

data = pandas.read_csv('data_set_HL60_U937_NB4_Jurkat.csv')
print 'data added'

#--------------------------------------------------
# PART (A)
# use the drop_duplicates command to remove duplicated genes

print ' '

print '--- PART (A) ---'

dat = data.drop_duplicates(cols='Gene Description', take_last = True)

print dat.shape[0], 'genes in data set'


#--------------------------------------------------
# PART (B)
# calculate the correlation coefficients between individual columns 
# using np.corrcoef, put into a list, pull out the maximum value

print ' '
print '--- PART (B) ---'

#------------------------
# CELL TYPE HL60
HL160_comparison_1v2 = np.corrcoef([dat['HL60_0_hrs'],dat['HL60_0.5_hrs']])
HL160_comparison_1v3 = np.corrcoef([dat['HL60_0_hrs'],dat['HL60_4_hrs']])
HL160_comparison_1v4 = np.corrcoef([dat['HL60_0_hrs'],dat['HL60_24_hrs']])
HL160_comparison_2v3 = np.corrcoef([dat['HL60_0.5_hrs'],dat['HL60_4_hrs']])
HL160_comparison_2v4 = np.corrcoef([dat['HL60_0.5_hrs'],dat['HL60_24_hrs']])
HL160_comparison_3v4  = np.corrcoef([dat['HL60_4_hrs'],dat['HL60_24_hrs']])

HL60_coefficients = (('0hrs v 0.5hrs', HL160_comparison_1v2corr),('0hrs v 4hrs', HL160_comparison_1v3corr),('0hrs v 24hrs', HL160_comparison_1v4corr),('0.5hrs v 4hrs', HL160_comparison_2v3corr),('0.5hrs v 24hrs', HL160_comparison_2v4corr),('4hrs v 24hrs', HL160_comparison_3v4corr))

print "HL60 Highest Correlated:", max(HL60_coefficients)


#------------------------
# CELL TYPE U937
U937_compar_1v2 = np.corrcoef([dat['U937_0_hrs'],dat['U937_0.5_hrs']])
U937_compar_1v3 = np.corrcoef([dat['U937_0_hrs'],dat['U937_4_hrs']])
U937_compar_1v4 = np.corrcoef([dat['U937_0_hrs'],dat['U937_24_hrs']])
U937_compar_2v3 = np.corrcoef([dat['U937_0.5_hrs'],dat['U937_4_hrs']])
U937_compar_2v4 = np.corrcoef([dat['U937_0.5_hrs'],dat['U937_24_hrs']])
U937_compar_3v4 = np.corrcoef([dat['U937_4_hrs'],dat['U937_24_hrs']])


U937_coefficients = (('0hrs v 0.5hrs', U937_comparison_1v2corr),('0hrs v 4hrs', U937_comparison_1v3corr),('0hrs v 24hrs', U937_comparison_1v4corr),('0.5hrs v 4hrs', U937_comparison_2v3corr),('4hrs v 24hrs', U937_comparison_2v4corr),('4hrs v 24hrs', U937_comparison_3v4corr))

print "U937 Highest Correlated:", max(U937_coefficients)


#------------------------
# CELL TYPE NB4
NB4_comparison_1v2 = np.corrcoef(dat['NB4_0_hrs'],dat['NB4_5.5_hrs'])
NB4_comparison_1v3 = np.corrcoef(dat['NB4_0_hrs'],dat['NB4_24_hrs'])
NB4_comparison_1v4 = np.corrcoef(dat['NB4_0_hrs'],dat['NB4_72_hrs'])
NB4_comparison_2v3 = np.corrcoef(dat['NB4_5.5_hrs'],dat['NB4_24_hrs'])
NB4_comparison_2v4 = np.corrcoef(dat['NB4_5.5_hrs'],dat['NB4_72_hrs'])
NB4_comparison_3v4 = np.corrcoef(dat['NB4_24_hrs'],dat['NB4_72_hrs'])

NB4_coefficients = (('0hrs v 5.5hrs',NB4_comparison_1v2[0,1]),('0hrs v 24hrs',NB4_comparison_1v3[0,1]),('0hrs v 72hrs',NB4_comparison_1v4[0,1]),('5.5hrs v 24hrs',NB4_comparison_2v3[0,1]),('5.5hrs v 72 hrs',NB4_comparison_2v4[0,1]),('24hrs v 72hrs',NB4_comparison_3v4[0,1]))

print "NB4 Highest Correlated:", max(NB4_coefficients)


#------------------------
# CELL TYPE Jurkat
jurkat_comparison_1v2 = np.corrcoef(dat['Jurkat_0_hrs'],dat['Jurkat_0.5_hrs'])
jurkat_comparison_1v3 = np.corrcoef(dat['Jurkat_0_hrs'],dat['Jurkat_4_hrs'])
jurkat_comparison_1v4 = np.corrcoef(dat['Jurkat_0_hrs'],dat['Jurkat_24_hrs call'])
jurkat_comparison_2v3 = np.corrcoef(dat['Jurkat_0.5_hrs'],dat['Jurkat_4_hrs'])
jurkat_comparison_2v4 = np.corrcoef(dat['Jurkat_0.5_hrs'],dat['Jurkat_24_hrs call'])
jurkat_comparison_3v4 = np.corrcoef(dat['Jurkat_4_hrs'],dat['Jurkat_24_hrs call'])

jurkat_coefficients = (('0hrs v 0.5hrs',jurkat_comparison_1v2[0,1]),('0hrs v 4hrs',jurkat_comparison_1v3[0,1]),('0hrs v 24hrs',jurkat_comparison_1v4[0,1]),('0.5hrs v 4hrs',jurkat_comparison_2v3[0,1]),('0.5hrs v 24hrs',jurkat_comparison_2v4[0,1]),('4hrs v 24hrs',jurkat_comparison_3v4[0,1]))

print 'Jurkat Highest Correlated:' ,max(jurkat_coefficients)


#--------------------------------------------------
# PART (C)
# calculate the magnitude of the average of the difference between the last data points in each cell line 
# NOTA BENE: I had trouble doing this myself, but attempted to replicate one of the solutions we talked about in class

print ' '
print '--- PART (C) ---'

names = ['HL60_24_hrs','U937_24_hrs','NB4_24_hrs','Jurkat_24_hrs']
magnitudes = []

for x in list(itertools.combinations(names,2)):
    magnitudes.append((x[0],x[1],abs(sum(dat[x[1]] - dat[x[0]])/len(dat[x[1]] - dat[x[0]]))))
for y in sorted(magnitudes,key - lambda x: x[2]):
    print y


#--------------------------------------------------
# PART (D)
# took the magnitude of the difference between the first and last data point of each cell line for each gene 
# and put into a list: [['gene','value']] then sorted the list and took the top ten entries

print ' '
print '--- PART (D) ---'

genelist = [['gene','value']]
for x in range(1,dat.shape[0]):
    genelist = genelist + [[dat['Gene Description'][x],abs(dat['Jurkat_0_hrs'][x]-dat['Jurkat_24_hrs call'][x])]]

genelist.sort(key = lambda x: x[::-1])

for x in range(0,10):
    print genelist[x][0]


#--------------------------------------------------
# PART (E)
# go through the list and check if any gene expression increase 2 fold at 24 hrs compared to 0 for all of the cell types. 
# if 24hr/0hr >=2 then add the gene to a list

print ' '
print '--- PART (E) ---'

answerE = range(0)
for gene in range(len(dat)):
    if dat.iat[gene,8]/dat.iat[gene,2] >= 2 and dat.iat[gene,16]/dat.iat[gene,10] >= 2 and dat.iat[gene,22]/dat.iat[gene,18] >= 2 and dat.iat[gene,34]/dat.iat[gene,28] >=2:
        answerE.append(dat.iat[gene,0])
        
print 'Genes that show two-fold higher expression at 24 hours:'
print answerE


#--------------------------------------------------
# PART (F)
# create a test file that contains the desired genes called 'ansF.txt'

print ' '
print '--- PART (F) ---'

script, filename = argv

target = open(filename, 'w')
target.truncate()
for gene in range(len(dat)):
    if dat.iat[gene,2]/dat.iat[gene,10] >= 2.0 or dat.iat[gene,2]/dat.iat[gene,10] <= 0.5:
        target.write(dat.iat[gene,1])
	target.write('\n')
target.close()




